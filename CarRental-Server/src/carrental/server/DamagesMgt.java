/*
 * Damages Management Form
 */
package carrental.server;

import java.sql.*;
import javax.swing.*;

/**
 *
 * @author Izaek Kisuule
 */
public class DamagesMgt extends javax.swing.JFrame {

    /**
     * Creates new form DamagesMgt
     */
    public DamagesMgt() {
        initComponents();
        setSize(900, 750);
        setTitle("Damages Management - Car Rental System");
        setLocationRelativeTo(null);
        loadDamageIds();
        loadRentalIds();
        loadCarIds();
    }

    private void loadDamageIds() {
        cmbDamageId.removeAllItems();
        cmbDamageId.addItem("Select Damage");

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "SELECT damage_id, status FROM damages ORDER BY damage_id";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                int damageId = rs.getInt("damage_id");
                String status = rs.getString("status");
                cmbDamageId.addItem(damageId + " - " + status);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading damage IDs: " + ex.getMessage());
        }
    }

    private void loadRentalIds() {
        cmbRentalId.removeAllItems();
        cmbRentalId.addItem("Select Rental");

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "SELECT rental_id FROM rentals ORDER BY rental_id";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                int rentalId = rs.getInt("rental_id");
                cmbRentalId.addItem(String.valueOf(rentalId));
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading rental IDs: " + ex.getMessage());
        }
    }

    private void loadCarIds() {
        cmbCarId.removeAllItems();
        cmbCarId.addItem("Select Car");

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "SELECT car_id, make, model FROM Cars ORDER BY car_id";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                int carId = rs.getInt("car_id");
                String make = rs.getString("make");
                String model = rs.getString("model");
                cmbCarId.addItem(carId + " - " + make + " " + model);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading car IDs: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDamageId = new javax.swing.JLabel();
        lblRentalId = new javax.swing.JLabel();
        lblCarId = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblRepairCost = new javax.swing.JLabel();
        lblReportedDate = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cmbDamageId = new javax.swing.JComboBox<>();
        cmbRentalId = new javax.swing.JComboBox<>();
        cmbCarId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        txtRepairCost = new javax.swing.JTextField();
        dateReported = new com.toedter.calendar.JDateChooser();
        cmbStatus = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDamageId.setText("Damage ID");

        lblRentalId.setText("Rental ID");

        lblCarId.setText("Car");

        lblDescription.setText("Description");

        lblRepairCost.setText("Repair Cost");

        lblReportedDate.setText("Reported Date");

        lblStatus.setText("Status");

        cmbDamageId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Damage" }));

        cmbRentalId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Rental" }));

        cmbCarId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Car" }));

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reported", "Assessed", "Repaired" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnBack.setText("Back To Dashboard");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDamageId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRentalId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCarId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRepairCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblReportedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbDamageId, 0, 250, Short.MAX_VALUE)
                            .addComponent(cmbRentalId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCarId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRepairCost)
                            .addComponent(dateReported, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind)))
                .addContainerGap(130, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(320, 320, 320))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDamageId)
                    .addComponent(cmbDamageId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRentalId)
                    .addComponent(cmbRentalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarId)
                    .addComponent(cmbCarId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRepairCost)
                    .addComponent(txtRepairCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblReportedDate)
                    .addComponent(dateReported, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String selectedRental = cmbRentalId.getSelectedItem().toString();
        String selectedCar = cmbCarId.getSelectedItem().toString();

        if (selectedRental.equals("Select Rental") || selectedCar.equals("Select Car") || 
            txtDescription.getText().isEmpty() || dateReported.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please fill all required fields!");
            return;
        }

        int rentalId = Integer.parseInt(selectedRental);
        int carId = Integer.parseInt(selectedCar.split(" - ")[0]);

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "INSERT INTO damages(rental_id, car_id, description, repair_cost, reported_date, status) VALUES (?,?,?,?,?,?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, rentalId);
            pst.setInt(2, carId);
            pst.setString(3, txtDescription.getText());
            
            if (txtRepairCost.getText().isEmpty()) {
                pst.setNull(4, java.sql.Types.DECIMAL);
            } else {
                pst.setDouble(4, Double.parseDouble(txtRepairCost.getText()));
            }
            
            pst.setDate(5, new java.sql.Date(dateReported.getDate().getTime()));
            pst.setString(6, cmbStatus.getSelectedItem().toString());

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Damage Record Added Successfully!");
            loadDamageIds();
            clearFields();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error adding damage: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        String selected = cmbDamageId.getSelectedItem().toString();
        if (selected.equals("Select Damage")) {
            JOptionPane.showMessageDialog(this, "Please select a damage record!");
            return;
        }

        int damageId = Integer.parseInt(selected.split(" - ")[0]);

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "SELECT * FROM damages WHERE damage_id=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, damageId);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                // Find and select rental
                int rentalId = rs.getInt("rental_id");
                for (int i = 0; i < cmbRentalId.getItemCount(); i++) {
                    if (cmbRentalId.getItemAt(i).equals(String.valueOf(rentalId))) {
                        cmbRentalId.setSelectedIndex(i);
                        break;
                    }
                }

                // Find and select car
                int carId = rs.getInt("car_id");
                for (int i = 0; i < cmbCarId.getItemCount(); i++) {
                    if (cmbCarId.getItemAt(i).startsWith(carId + " - ")) {
                        cmbCarId.setSelectedIndex(i);
                        break;
                    }
                }

                txtDescription.setText(rs.getString("description"));
                
                double repairCost = rs.getDouble("repair_cost");
                if (!rs.wasNull()) {
                    txtRepairCost.setText(String.valueOf(repairCost));
                } else {
                    txtRepairCost.setText("");
                }
                
                dateReported.setDate(rs.getDate("reported_date"));
                cmbStatus.setSelectedItem(rs.getString("status"));
            } else {
                JOptionPane.showMessageDialog(this, "Damage record not found!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error finding damage: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String selected = cmbDamageId.getSelectedItem().toString();
        if (selected.equals("Select Damage")) {
            JOptionPane.showMessageDialog(this, "Please select a damage record!");
            return;
        }

        String selectedRental = cmbRentalId.getSelectedItem().toString();
        String selectedCar = cmbCarId.getSelectedItem().toString();

        if (selectedRental.equals("Select Rental") || selectedCar.equals("Select Car") || 
            txtDescription.getText().isEmpty() || dateReported.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please fill all required fields!");
            return;
        }

        int damageId = Integer.parseInt(selected.split(" - ")[0]);
        int rentalId = Integer.parseInt(selectedRental);
        int carId = Integer.parseInt(selectedCar.split(" - ")[0]);

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "UPDATE damages SET rental_id=?, car_id=?, description=?, repair_cost=?, reported_date=?, status=? WHERE damage_id=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, rentalId);
            pst.setInt(2, carId);
            pst.setString(3, txtDescription.getText());
            
            if (txtRepairCost.getText().isEmpty()) {
                pst.setNull(4, java.sql.Types.DECIMAL);
            } else {
                pst.setDouble(4, Double.parseDouble(txtRepairCost.getText()));
            }
            
            pst.setDate(5, new java.sql.Date(dateReported.getDate().getTime()));
            pst.setString(6, cmbStatus.getSelectedItem().toString());
            pst.setInt(7, damageId);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Damage Record Updated Successfully!");
            loadDamageIds();
            clearFields();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error updating damage: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String selected = cmbDamageId.getSelectedItem().toString();
        if (selected.equals("Select Damage")) {
            JOptionPane.showMessageDialog(this, "Please select a damage record!");
            return;
        }

        int damageId = Integer.parseInt(selected.split(" - ")[0]);

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this damage record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try (Connection conn = DbConnection.getConnection()) {
            String sql = "DELETE FROM damages WHERE damage_id=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, damageId);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Damage Record Deleted Successfully!");
            loadDamageIds();
            clearFields();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error deleting damage: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void clearFields() {
        cmbDamageId.setSelectedIndex(0);
        cmbRentalId.setSelectedIndex(0);
        cmbCarId.setSelectedIndex(0);
        txtDescription.setText("");
        txtRepairCost.setText("");
        dateReported.setDate(null);
        cmbStatus.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DamagesMgt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCarId;
    private javax.swing.JComboBox<String> cmbDamageId;
    private javax.swing.JComboBox<String> cmbRentalId;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser dateReported;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarId;
    private javax.swing.JLabel lblDamageId;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblRentalId;
    private javax.swing.JLabel lblRepairCost;
    private javax.swing.JLabel lblReportedDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtRepairCost;
    // End of variables declaration//GEN-END:variables
}