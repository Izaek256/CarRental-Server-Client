/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carrental.server;

import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Izaek Kisuule
 */
public class Payment extends javax.swing.JFrame {

    /**
     * Creates new form Payment
     */
    private void loadRentalIDs() {
        try (Connection conn = DbConnection.getConnection()) {
            Rental_IDComboBox.removeAllItems();
            Rental_IDComboBox.addItem("Select Rental ID");

            String query = "SELECT r.rental_id, CONCAT(c.first_name, ' ', c.last_name) as customer_name "
                    + "FROM Rentals r "
                    + "JOIN Customers c ON r.customer_id = c.customer_id "
                    + "WHERE r.status = 'Active' "
                    + "ORDER BY r.rental_id";

            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String item = rs.getInt("rental_id") + " - " + rs.getString("customer_name");
                Rental_IDComboBox.addItem(item);
            }

            rs.close();
            pst.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading rental IDs: " + e.getMessage());
        }

        // ðŸ”¹ Attach listener (auto update amount when rental selected)
        Rental_IDComboBox.addActionListener(evt -> {
            if (Rental_IDComboBox.getSelectedIndex() > 0) {
                String rentalStr = Rental_IDComboBox.getSelectedItem().toString();
                int rentalId = Integer.parseInt(rentalStr.split(" - ")[0]);

                try (Connection conn = DbConnection.getConnection()) {
                    String sql = "SELECT total_amount FROM Rentals WHERE rental_id=?";
                    PreparedStatement pst = conn.prepareStatement(sql);
                    pst.setInt(1, rentalId);
                    ResultSet rs = pst.executeQuery();

                    if (rs.next()) {
                        txtAmountField.setText(String.format("%.2f", rs.getDouble("total_amount")));
                    }

                    rs.close();
                    pst.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error fetching rental amount: " + ex.getMessage());
                }
            } else {
                txtAmountField.setText(""); // Clear if "Select Rental ID"
            }
        });
    }

    private void clearForm() {
        txtPaymentID.setText("");
        Rental_IDComboBox.setSelectedIndex(0);
        txtAmountField.setText("");
        PaymentDateChooser.setDate(null);
        PaymentMtdComboBox.setSelectedIndex(0);
    }

    public Payment() {
        initComponents();
        setTitle("Payment - Car Rental System");
        setSize(600, 600);
        setLocationRelativeTo(null);
        loadRentalIDs();
        clearForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LblRentalID = new javax.swing.JLabel();
        LblAmount = new javax.swing.JLabel();
        LblPayDate = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Rental_IDComboBox = new javax.swing.JComboBox<>();
        PaymentMtdComboBox = new javax.swing.JComboBox<>();
        txtAmountField = new javax.swing.JTextField();
        btnPay = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        LblPaymentId = new javax.swing.JLabel();
        txtPaymentID = new javax.swing.JTextField();
        PaymentDateChooser = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LblRentalID.setText("Rental ID");

        LblAmount.setText("Amount");

        LblPayDate.setText("Payment Date");

        jLabel4.setText("Payment Method");

        Rental_IDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Rental_IDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rental_IDComboBoxActionPerformed(evt);
            }
        });

        PaymentMtdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Mobile Money", "Bank Transfer", "Bank Card", "Credit Card" }));
        PaymentMtdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentMtdComboBoxActionPerformed(evt);
            }
        });

        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText("Back to Dashboard");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        LblPaymentId.setText("Payment Id");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(btnPay)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LblPaymentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblPayDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblRentalID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PaymentMtdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(PaymentDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPaymentID, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAmountField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Rental_IDComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 144, Short.MAX_VALUE))
                                .addGap(1, 1, 1)))))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblPaymentId)
                    .addComponent(txtPaymentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblRentalID, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Rental_IDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAmountField)
                    .addComponent(LblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblPayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PaymentDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PaymentMtdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPay)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(40, 40, 40)
                .addComponent(btnBack)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PaymentMtdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentMtdComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentMtdComboBoxActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        try (Connection conn = DbConnection.getConnection()) {
            // Get selected rental
            String rentalStr = Rental_IDComboBox.getSelectedItem().toString();
            int rentalId = Integer.parseInt(rentalStr.split(" - ")[0]);

            double amount = Double.parseDouble(txtAmountField.getText());
            java.sql.Date payDate = new java.sql.Date(PaymentDateChooser.getDate().getTime());
            String method = PaymentMtdComboBox.getSelectedItem().toString();

            // Insert payment
            String sql = "INSERT INTO Payments (rental_id, amount, payment_date, payment_method, payment_status) "
                    + "VALUES (?, ?, ?, ?, 'Completed')";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, rentalId);
            pst.setDouble(2, amount);
            pst.setDate(3, payDate);
            pst.setString(4, method);

            int rows = pst.executeUpdate();

            if (rows > 0) {
                // Update rental status to completed
                String updateRental = "UPDATE Rentals SET status = 'Completed' WHERE rental_id = ?";
                PreparedStatement pstUpdate = conn.prepareStatement(updateRental);
                pstUpdate.setInt(1, rentalId);
                pstUpdate.executeUpdate();
                pstUpdate.close();

                // Update car status back to available
                String updateCar = "UPDATE Cars c JOIN Rentals r ON c.car_id = r.car_id SET c.status = 'Available' WHERE r.rental_id = ?";
                PreparedStatement pstCar = conn.prepareStatement(updateCar);
                pstCar.setInt(1, rentalId);
                pstCar.executeUpdate();
                pstCar.close();

                JOptionPane.showMessageDialog(this, "Payment processed successfully!");
                clearForm();
                loadRentalIDs(); // refresh rentals combo box
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error processing payment: " + e.getMessage());
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try (Connection conn = DbConnection.getConnection()) {
            int paymentId = Integer.parseInt(txtPaymentID.getText());
            double amount = Double.parseDouble(txtAmountField.getText());
            java.sql.Date payDate = new java.sql.Date(PaymentDateChooser.getDate().getTime());
            String method = PaymentMtdComboBox.getSelectedItem().toString();

            String sql = "UPDATE Payments SET amount=?, payment_date=?, payment_method=? WHERE payment_id=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setDouble(1, amount);
            pst.setDate(2, payDate);
            pst.setString(3, method);
            pst.setInt(4, paymentId);

            int rows = pst.executeUpdate();
            pst.close();

            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Payment updated successfully!");
                clearForm();
                loadRentalIDs();
            } else {
                JOptionPane.showMessageDialog(this, "Payment ID not found!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating payment: " + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try (Connection conn = DbConnection.getConnection()) {
            int paymentId = Integer.parseInt(txtPaymentID.getText());

            String sql = "DELETE FROM Payments WHERE payment_id=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, paymentId);
            int rows = pst.executeUpdate();
            pst.close();

            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Payment deleted successfully!");
                loadRentalIDs();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Payment ID not found!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting payment: " + e.getMessage());
        }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void Rental_IDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rental_IDComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Rental_IDComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LblAmount;
    private javax.swing.JLabel LblPayDate;
    private javax.swing.JLabel LblPaymentId;
    private javax.swing.JLabel LblRentalID;
    private com.toedter.calendar.JDateChooser PaymentDateChooser;
    private javax.swing.JComboBox<String> PaymentMtdComboBox;
    private javax.swing.JComboBox<String> Rental_IDComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtAmountField;
    private javax.swing.JTextField txtPaymentID;
    // End of variables declaration//GEN-END:variables
}
