/*
 * Insurance Management Form
 */
package carrental.client;

import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.*;

/**
 *
 * @author Izaek Kisuule
 */
public class InsuranceMgt extends javax.swing.JFrame {

    /**
     * Creates new form InsuranceMgt
     */
    public InsuranceMgt() {
        initComponents();
        setSize(750, 750);
        setTitle("Insurance Management - Car Rental System");
        setLocationRelativeTo(null);
        loadInsuranceIds();
        loadCarIds();
    }

    private void selectItemInComboBox(JComboBox<String> comboBox, int id) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String item = comboBox.getItemAt(i);
            if (item.startsWith(id + " - ")) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    private void clearFields() {
        cmbInsuranceId.setSelectedIndex(0);
        cmbCarId.setSelectedIndex(0);
        txtPolicyNumber.setText("");
        txtInsuranceCompany.setText("");
        txtCoverageAmount.setText("");
        txtPremiumAmount.setText("");
        dateStart.setDate(null);
        dateEnd.setDate(null);
        cmbStatus.setSelectedIndex(0);
    }

    private void loadInsuranceIds() {
        try {
            cmbInsuranceId.removeAllItems();
            cmbInsuranceId.addItem("Select Insurance");

            String response = ServerConnection.getInstance().sendRequest("LIST|Insurance");
            if (response.startsWith("SUCCESS|")) {
                String[] insurances = response.substring(8).split(";");
                for (String insurance : insurances) {
                    cmbInsuranceId.addItem(insurance);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading insurance IDs: " + ex.getMessage());
        }
    }

    private void loadCarIds() {
        try {
            cmbCarId.removeAllItems();
            cmbCarId.addItem("Select Car");

            String response = ServerConnection.getInstance().sendRequest("LIST|Cars");
            if (response.startsWith("SUCCESS|")) {
                String[] cars = response.substring(8).split(";");
                for (String car : cars) {
                    cmbCarId.addItem(car);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading car IDs: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInsuranceId = new javax.swing.JLabel();
        lblCarId = new javax.swing.JLabel();
        lblPolicyNumber = new javax.swing.JLabel();
        lblInsuranceCompany = new javax.swing.JLabel();
        lblCoverageAmount = new javax.swing.JLabel();
        lblPremiumAmount = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblEndDate = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cmbInsuranceId = new javax.swing.JComboBox<>();
        cmbCarId = new javax.swing.JComboBox<>();
        txtPolicyNumber = new javax.swing.JTextField();
        txtInsuranceCompany = new javax.swing.JTextField();
        txtCoverageAmount = new javax.swing.JTextField();
        txtPremiumAmount = new javax.swing.JTextField();
        dateStart = new com.toedter.calendar.JDateChooser();
        dateEnd = new com.toedter.calendar.JDateChooser();
        cmbStatus = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblInsuranceId.setText("Insurance ID");

        lblCarId.setText("Car");

        lblPolicyNumber.setText("Policy Number");

        lblInsuranceCompany.setText("Insurance Company");

        lblCoverageAmount.setText("Coverage Amount");

        lblPremiumAmount.setText("Premium Amount");

        lblStartDate.setText("Start Date");

        lblEndDate.setText("End Date");

        lblStatus.setText("Status");

        cmbInsuranceId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Insurance" }));

        cmbCarId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Car" }));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Expired" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnBack.setText("Back To Dashboard");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblInsuranceId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCarId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPolicyNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInsuranceCompany, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCoverageAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPremiumAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbInsuranceId, 0, 250, Short.MAX_VALUE)
                            .addComponent(cmbCarId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPolicyNumber)
                            .addComponent(txtInsuranceCompany)
                            .addComponent(txtCoverageAmount)
                            .addComponent(txtPremiumAmount)
                            .addComponent(dateStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind)))
                .addContainerGap(130, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(320, 320, 320))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInsuranceId)
                    .addComponent(cmbInsuranceId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarId)
                    .addComponent(cmbCarId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPolicyNumber)
                    .addComponent(txtPolicyNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInsuranceCompany)
                    .addComponent(txtInsuranceCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCoverageAmount)
                    .addComponent(txtCoverageAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPremiumAmount)
                    .addComponent(txtPremiumAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStartDate)
                    .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEndDate)
                    .addComponent(dateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String selectedCar = cmbCarId.getSelectedItem().toString();
            if (selectedCar.equals("Select Car") || txtPolicyNumber.getText().isEmpty()
                    || txtInsuranceCompany.getText().isEmpty() || txtPremiumAmount.getText().isEmpty()
                    || dateStart.getDate() == null || dateEnd.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields!");
                return;
            }

            int carId = Integer.parseInt(selectedCar.split(" - ")[0]);
            String startDate = new SimpleDateFormat("yyyy-MM-dd").format(dateStart.getDate());
            String endDate = new SimpleDateFormat("yyyy-MM-dd").format(dateEnd.getDate());

            String coverageAmount = txtCoverageAmount.getText().isEmpty() ? "0" : txtCoverageAmount.getText();

            String insuranceData = carId + "," + txtPolicyNumber.getText() + ","
                    + txtInsuranceCompany.getText() + "," + coverageAmount + ","
                    + txtPremiumAmount.getText() + "," + startDate + ","
                    + endDate + "," + cmbStatus.getSelectedItem().toString();

            String response = ServerConnection.getInstance().sendRequest("ADD|Insurance|" + insuranceData);

            if (response.startsWith("SUCCESS|")) {
                JOptionPane.showMessageDialog(this, "Insurance Added Successfully!");
                loadInsuranceIds();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Error adding insurance: " + response);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error adding insurance: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try {
        String selected = cmbInsuranceId.getSelectedItem().toString();
        if (selected.equals("Select Insurance")) {
            JOptionPane.showMessageDialog(this, "Please select an insurance!");
            return;
        }

        int insuranceId = Integer.parseInt(selected.split(" - ")[0]);
        String response = ServerConnection.getInstance().sendRequest("FIND|Insurance|" + insuranceId);

        if (response.startsWith("SUCCESS|")) {
            String[] data = response.substring(8).split(",");
            // Format: car_id,policy_number,insurance_company,coverage_amount,premium_amount,start_date,end_date,status
            
            // Set car
            int carId = Integer.parseInt(data[0]);
            selectItemInComboBox(cmbCarId, carId);
            
            txtPolicyNumber.setText(data[1]);
            txtInsuranceCompany.setText(data[2]);
            txtCoverageAmount.setText(data[3].equals("0") ? "" : data[3]);
            txtPremiumAmount.setText(data[4]);
            dateStart.setDate(java.sql.Date.valueOf(data[5]));
            dateEnd.setDate(java.sql.Date.valueOf(data[6]));
            cmbStatus.setSelectedItem(data[7]);
        } else {
            JOptionPane.showMessageDialog(this, "Insurance not found: " + response);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error finding insurance: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         try {
        String selected = cmbInsuranceId.getSelectedItem().toString();
        if (selected.equals("Select Insurance")) {
            JOptionPane.showMessageDialog(this, "Please select an insurance!");
            return;
        }

        String selectedCar = cmbCarId.getSelectedItem().toString();
        if (selectedCar.equals("Select Car") || txtPolicyNumber.getText().isEmpty() || 
            txtInsuranceCompany.getText().isEmpty() || txtPremiumAmount.getText().isEmpty() ||
            dateStart.getDate() == null || dateEnd.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please fill all required fields!");
            return;
        }

        int insuranceId = Integer.parseInt(selected.split(" - ")[0]);
        int carId = Integer.parseInt(selectedCar.split(" - ")[0]);
        String startDate = new SimpleDateFormat("yyyy-MM-dd").format(dateStart.getDate());
        String endDate = new SimpleDateFormat("yyyy-MM-dd").format(dateEnd.getDate());
        
        String coverageAmount = txtCoverageAmount.getText().isEmpty() ? "0" : txtCoverageAmount.getText();
        
        String insuranceData = insuranceId + "," + carId + "," + txtPolicyNumber.getText() + "," + 
                             txtInsuranceCompany.getText() + "," + coverageAmount + "," +
                             txtPremiumAmount.getText() + "," + startDate + "," + 
                             endDate + "," + cmbStatus.getSelectedItem().toString();

        String response = ServerConnection.getInstance().sendRequest("UPDATE|Insurance|" + insuranceData);

        if (response.startsWith("SUCCESS|")) {
            JOptionPane.showMessageDialog(this, "Insurance Updated Successfully!");
            loadInsuranceIds();
            clearFields();
        } else {
            JOptionPane.showMessageDialog(this, "Error updating insurance: " + response);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error updating insurance: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
        String selected = cmbInsuranceId.getSelectedItem().toString();
        if (selected.equals("Select Insurance")) {
            JOptionPane.showMessageDialog(this, "Please select an insurance!");
            return;
        }

        int insuranceId = Integer.parseInt(selected.split(" - ")[0]);

        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this insurance?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String response = ServerConnection.getInstance().sendRequest("DELETE|Insurance|" + insuranceId);

        if (response.startsWith("SUCCESS|")) {
            JOptionPane.showMessageDialog(this, "Insurance Deleted Successfully!");
            loadInsuranceIds();
            clearFields();
        } else {
            JOptionPane.showMessageDialog(this, "Error deleting insurance: " + response);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error deleting insurance: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsuranceMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsuranceMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsuranceMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsuranceMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsuranceMgt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCarId;
    private javax.swing.JComboBox<String> cmbInsuranceId;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser dateEnd;
    private com.toedter.calendar.JDateChooser dateStart;
    private javax.swing.JLabel lblCarId;
    private javax.swing.JLabel lblCoverageAmount;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblInsuranceCompany;
    private javax.swing.JLabel lblInsuranceId;
    private javax.swing.JLabel lblPolicyNumber;
    private javax.swing.JLabel lblPremiumAmount;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtCoverageAmount;
    private javax.swing.JTextField txtInsuranceCompany;
    private javax.swing.JTextField txtPolicyNumber;
    private javax.swing.JTextField txtPremiumAmount;
    // End of variables declaration//GEN-END:variables
}
