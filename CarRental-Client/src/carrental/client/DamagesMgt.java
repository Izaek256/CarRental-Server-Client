/*
 * Damages Management Form
 */
package carrental.client;

import java.awt.event.ItemEvent;
import java.text.SimpleDateFormat;
import javax.swing.*;

/**
 *
 * @author Izaek Kisuule
 */
public class DamagesMgt extends javax.swing.JFrame {

    private boolean isLoadingData = false;

    /**
     * Creates new form DamagesMgt
     */
    public DamagesMgt() {
        initComponents();
        setSize(750, 750);
        setTitle("Damages Management - Car Rental System");
        setLocationRelativeTo(null);
        isLoadingData = true; // Disable auto-fill during initial load
        loadDamageIds();
        loadRentalIds();
        loadCarIds();
        isLoadingData = false;
        cmbRentalId.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED && !isLoadingData) {
                autoFillCarFromRental();
            }
        });
    }

    private void autoFillCarFromRental() {
        try {
            Object selectedItem = cmbRentalId.getSelectedItem();

            // Check if selection is null or is the default option
            if (selectedItem == null) {
                return;
            }

            String selectedRental = selectedItem.toString();

            if (selectedRental.equals("Select Rental")) {
                return;
            }

            // Extract car_id from "2 - Alex Johnson - Toyota Camry : 5"
            if (selectedRental.contains(" : ")) {
                String[] parts = selectedRental.split(" : ");
                if (parts.length == 2) {
                    int carId = Integer.parseInt(parts[1].trim());

                    // Find and select this car in the car combo box
                    for (int i = 0; i < cmbCarId.getItemCount(); i++) {
                        String carItem = cmbCarId.getItemAt(i);
                        if (carItem.startsWith(carId + " - ")) {
                            cmbCarId.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
        } catch (Exception ex) {
            // Silently ignore errors during auto-fill
        }
    }

    private void loadDamageIds() {
        try {
            cmbDamageId.removeAllItems();
            cmbDamageId.addItem("Select Damage");

            String response = ServerConnection.getInstance().sendRequest("LIST|Damages|");
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS") && parts.length > 1) {
                String[] damages = parts[1].split(";");
                for (String damage : damages) {
                    cmbDamageId.addItem(damage);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading damage IDs: " + ex.getMessage());
        }
    }

    private void loadRentalIds() {
        try {
            cmbRentalId.removeAllItems();
            cmbRentalId.addItem("Select Rental");

            String response = ServerConnection.getInstance().sendRequest("LIST|Rentals|");
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS") && parts.length > 1) {
                String[] rentals = parts[1].split(";");
                for (String rental : rentals) {
                    cmbRentalId.addItem(rental);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading rental IDs: " + ex.getMessage());
        }
    }

    private void loadCarIds() {
        try {
            cmbCarId.removeAllItems();
            cmbCarId.addItem("Select Car");

            String response = ServerConnection.getInstance().sendRequest("LIST|Cars|");
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS") && parts.length > 1) {
                String[] cars = parts[1].split(";");
                for (String car : cars) {
                    cmbCarId.addItem(car);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading car IDs: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDamageId = new javax.swing.JLabel();
        lblRentalId = new javax.swing.JLabel();
        lblCarId = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblRepairCost = new javax.swing.JLabel();
        lblReportedDate = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cmbDamageId = new javax.swing.JComboBox<>();
        cmbRentalId = new javax.swing.JComboBox<>();
        cmbCarId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        txtRepairCost = new javax.swing.JTextField();
        dateReported = new com.toedter.calendar.JDateChooser();
        cmbStatus = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDamageId.setText("Damage ID");

        lblRentalId.setText("Rental ID");

        lblCarId.setText("Car");

        lblDescription.setText("Description");

        lblRepairCost.setText("Repair Cost");

        lblReportedDate.setText("Reported Date");

        lblStatus.setText("Status");

        cmbDamageId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Damage" }));

        cmbRentalId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Rental" }));
        cmbRentalId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRentalIdActionPerformed(evt);
            }
        });

        cmbCarId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Car" }));

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reported", "Assessed", "Repaired" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnBack.setText("Back To Dashboard");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDamageId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRentalId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCarId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRepairCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblReportedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbDamageId, 0, 250, Short.MAX_VALUE)
                            .addComponent(cmbRentalId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCarId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRepairCost)
                            .addComponent(dateReported, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind)))
                .addContainerGap(130, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(320, 320, 320))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDamageId)
                    .addComponent(cmbDamageId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRentalId)
                    .addComponent(cmbRentalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarId)
                    .addComponent(cmbCarId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRepairCost)
                    .addComponent(txtRepairCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblReportedDate)
                    .addComponent(dateReported, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String selectedRental = cmbRentalId.getSelectedItem().toString();
            String selectedCar = cmbCarId.getSelectedItem().toString();

            if (selectedRental.equals("Select Rental") || selectedCar.equals("Select Car")
                    || txtDescription.getText().isEmpty() || dateReported.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields!");
                return;
            }

            // Extract rental_id from "2 - Alex Johnson - Toyota Camry : 5"
            int rentalId = Integer.parseInt(selectedRental.split(" - ")[0].trim());

            // Extract car_id from "5 - Toyota Camry"
            int carId = Integer.parseInt(selectedCar.split(" - ")[0].trim());

            String reportedDate = new SimpleDateFormat("yyyy-MM-dd").format(dateReported.getDate());

            // Send empty string for NULL repair cost
            String repairCost = txtRepairCost.getText().trim();

            // Data format: rental_id|car_id|description|repair_cost|reported_date|status
            // Using PIPE delimiter to avoid conflicts with commas in description
            String damageData = rentalId + "|"
                    + carId + "|"
                    + txtDescription.getText().replace("|", "¦") + "|" // Replace any pipes in description
                    + repairCost + "|"
                    + reportedDate + "|"
                    + cmbStatus.getSelectedItem().toString();

            String response = ServerConnection.getInstance().sendRequest("ADD|Damages|" + damageData);
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS")) {
                JOptionPane.showMessageDialog(this, parts[1]);
                loadDamageIds();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Error: " + parts[1]);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error adding damage: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try {
            String selected = cmbDamageId.getSelectedItem().toString();
            if (selected.equals("Select Damage")) {
                JOptionPane.showMessageDialog(this, "Please select a damage!");
                return;
            }
            int damageId = Integer.parseInt(selected.split(" - ")[0]);
            String response = ServerConnection.getInstance().sendRequest("FIND|Damages|" + damageId);

            if (response == null || response.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No response from server!");
                return;
            }

            if (!response.contains("|")) {
                JOptionPane.showMessageDialog(this, "Invalid server response format: " + response);
                return;
            }

            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS")) {
                if (parts.length < 2 || parts[1].isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Server returned empty data!");
                    return;
                }

                String[] fields = parts[1].split("\\|");

                if (fields.length >= 6) {
                    // Find and select rental ID
                    int rentalId = Integer.parseInt(fields[0]);
                    for (int i = 0; i < cmbRentalId.getItemCount(); i++) {
                        String item = cmbRentalId.getItemAt(i);
                        if (item.startsWith(rentalId + " - ")) {
                            cmbRentalId.setSelectedIndex(i);
                            break;
                        }
                    }

                    // Find and select car ID
                    int carId = Integer.parseInt(fields[1]);
                    for (int i = 0; i < cmbCarId.getItemCount(); i++) {
                        String item = cmbCarId.getItemAt(i);
                        if (item.startsWith(carId + " - ")) {
                            cmbCarId.setSelectedIndex(i);
                            break;
                        }
                    }

                    // Set fields
                    txtDescription.setText(fields[2].replace("¦", "|"));
                    txtRepairCost.setText(fields[3]);

                    // Set date
                    try {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        dateReported.setDate(sdf.parse(fields[4]));
                    } catch (Exception dateEx) {
                        dateReported.setDate(null);
                    }

                    cmbStatus.setSelectedItem(fields[5]);
                    JOptionPane.showMessageDialog(this, "Record found!");
                } else {
                    JOptionPane.showMessageDialog(this, "Incomplete data! Expected 6 fields, got " + fields.length);
                }
            } else {
                String errorMsg = parts.length > 1 ? parts[1] : "Unknown error";
                JOptionPane.showMessageDialog(this, "Error: " + errorMsg);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            String selected = cmbDamageId.getSelectedItem().toString();
            if (selected.equals("Select Damage")) {
                JOptionPane.showMessageDialog(this, "Please select a damage record!");
                return;
            }

            String selectedRental = cmbRentalId.getSelectedItem().toString();
            String selectedCar = cmbCarId.getSelectedItem().toString();

            if (selectedRental.equals("Select Rental") || selectedCar.equals("Select Car")
                    || txtDescription.getText().isEmpty() || dateReported.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields!");
                return;
            }

            int damageId = Integer.parseInt(selected.split(" - ")[0]);

            // Extract rental_id from "2 - Alex Johnson - Toyota Camry : 5"
            int rentalId = Integer.parseInt(selectedRental.split(" - ")[0].trim());

            // Extract car_id from "5 - Toyota Camry"
            int carId = Integer.parseInt(selectedCar.split(" - ")[0].trim());

            String reportedDate = new SimpleDateFormat("yyyy-MM-dd").format(dateReported.getDate());
            String repairCost = txtRepairCost.getText().trim();

            // Data format: damage_id|rental_id|car_id|description|repair_cost|reported_date|status
            // Using PIPE delimiter (changed from comma)
            String damageData = damageId + "|"
                    + rentalId + "|"
                    + carId + "|"
                    + txtDescription.getText().replace("|", "¦") + "|" // Replace any pipes in description
                    + repairCost + "|"
                    + reportedDate + "|"
                    + cmbStatus.getSelectedItem().toString();

            String response = ServerConnection.getInstance().sendRequest("UPDATE|Damages|" + damageData);
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS")) {
                JOptionPane.showMessageDialog(this, parts[1]);
                loadDamageIds();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Error: " + parts[1]);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error updating damage: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            String selected = cmbDamageId.getSelectedItem().toString();
            if (selected.equals("Select Damage")) {
                JOptionPane.showMessageDialog(this, "Please select a damage record!");
                return;
            }

            int damageId = Integer.parseInt(selected.split(" - ")[0]);

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this damage record?",
                    "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);

            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }

            String response = ServerConnection.getInstance().sendRequest("DELETE|Damages|" + damageId);
            String[] parts = response.split("\\|", 2);

            if (parts[0].equals("SUCCESS")) {
                JOptionPane.showMessageDialog(this, parts[1]);
                loadDamageIds();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Error: " + parts[1]);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error deleting damage: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbRentalIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRentalIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRentalIdActionPerformed

    private void clearFields() {
        cmbDamageId.setSelectedIndex(0);
        cmbRentalId.setSelectedIndex(0);
        cmbCarId.setSelectedIndex(0);
        txtDescription.setText("");
        txtRepairCost.setText("");
        dateReported.setDate(null);
        cmbStatus.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DamagesMgt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DamagesMgt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCarId;
    private javax.swing.JComboBox<String> cmbDamageId;
    private javax.swing.JComboBox<String> cmbRentalId;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser dateReported;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarId;
    private javax.swing.JLabel lblDamageId;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblRentalId;
    private javax.swing.JLabel lblRepairCost;
    private javax.swing.JLabel lblReportedDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtRepairCost;
    // End of variables declaration//GEN-END:variables
}
